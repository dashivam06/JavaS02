import java.util.Collections;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 * Displays details of all lecturers in a new frame.
 * If there are no lecturers to display, shows a message dialog.
 */
public void displayLecturer() {
    int count = 0;

    // Cheak if there exists any Lecturer type of object in ArrayList
    for (Teacher teacher : teachers) {
        if (teacher instanceof Lecturer) {

            
            // if any instance of Lecturer found increase the count value and break the loop 
            count++;
            break;
        }
    }
    if (count <= 0) {
        // If no lecturers found, display a message dialog
        JOptionPane.showMessageDialog(null, "There are currently no Lecturers to display.");
        return;
    } else {
        
        // Creating a new frame to display lecturer details
        JFrame displayLecturerFrame = new JFrame("Lecturer Details");
        displayLecturerFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        displayLecturerFrame.setSize(940, 300);
        displayLecturerFrame.setLocationRelativeTo(null); // Center the frame on the screen

        JPanel panel = new JPanel(new BorderLayout());
        displayLecturerFrame.add(panel);

        String[] columnNames = { "ID", "Lecturer Name", "Address", "Working Type", "Employment Status",
                "Working Hour", "Department", "Year Of Experience" };
        String[][] rowData = new String[teachers.size()][columnNames.length];


             // Initialized the JTable variable which will contain all the values of the
        // Tutor
        JTable table = new JTable(rowData, columnNames);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); // Disabled auto-resizing of columns
        table.setEnabled(false);
       
 // For UpperPart Section that holds the search box and other things like filtering out data with the help of sort by button

        JPanel upperPanel = new JPanel(new BorderLayout());
        JPanel leftPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));

        ButtonGroup radioButtonGroup = new ButtonGroup();

        JRadioButton ascending = new JRadioButton("Low to High");
        JRadioButton descending = new JRadioButton("Other      ");

        radioButtonGroup.add(ascending);
        radioButtonGroup.add(descending);

        ascending.setSelected(true);

        rightPanel.add(ascending);
        rightPanel.add(descending);

        JLabel sortByLabel = new JLabel("Sort By:");
        JComboBox<String> sortByComboBox = new JComboBox<>(
                new String[] { "Teacher ID ", "Teacher Name ", "Employement Status" });

        rightPanel.add(sortByLabel);
        rightPanel.add(sortByComboBox);

        JTextField searchBox = new JTextField(15);
        JButton searchButton = new JButton("Search  üîç ");

        // I have no idea what the heck is this Sorry, But it was generated by ChatGPT...
  
        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String searchText = searchBox.getText().toLowerCase();
                TableRowSorter<TableModel> sorter = new TableRowSorter<>(table.getModel());
                table.setRowSorter(sorter);

                if (searchText.trim().isEmpty()) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
                }
            }
        });

        leftPanel.add(searchBox);
        leftPanel.add(searchButton);

        upperPanel.add(rightPanel, BorderLayout.EAST);
        upperPanel.add(leftPanel, BorderLayout.WEST);

        panel.add(upperPanel, BorderLayout.NORTH);
          // ActionListener for DisplayTutor Button

          ActionListener listenerForSortByComboBox = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                JComboBox comboBox = (JComboBox) e.getSource(); // Get the source JComboBox
                String selectedOption = (String) comboBox.getSelectedItem();

                if (selectedOption.trim().equals("Teacher ID")) {
                    if(ascending.isSelected()){
                        Collections.sort(teachers, new SortByID(true));
                        
                    }else{
                    Collections.sort(teachers, new SortByID(false));
                    }
                } else if (selectedOption.trim().equals("Teacher Name")) {
                    if(ascending.isSelected()){
                        Collections.sort(teachers, new SortByID(true));
                    }else{
                    Collections.sort(teachers, new SortByID(false));
                    }
                } else {
                    if(ascending.isSelected()){
                        Collections.sort(teachers, new SortByID(true));
                    }else{
                    Collections.sort(teachers, new SortByID(false));
                    }
                }


     


                int rowIndex = 0;
        // Iterate over the teachers list to populate the table data
        for (Teacher teacher : teachers) {
            if (teacher instanceof Lecturer) {
                Lecturer lecturer = (Lecturer) teacher;
                // Populate rowData with lecturer details
                rowData[rowIndex][0] = String.valueOf(lecturer.getteacher_id());
                rowData[rowIndex][1] = lecturer.getname();
                rowData[rowIndex][2] = lecturer.getaddress();
                rowData[rowIndex][3] = lecturer.getworking_type();
                rowData[rowIndex][4] = lecturer.getemployment_status();
                rowData[rowIndex][5] = String.valueOf(lecturer.getworking_hours());
                rowData[rowIndex][6] = String.valueOf(lecturer.getdepartment());
                rowData[rowIndex][7] = String.valueOf(lecturer.getyearOfExperience());
                rowIndex++;
            }
        }
        table.repaint(); // Update the table automatically

    }
};

         // Actionlistener for RadioButton

        ActionListener listenerForRadioBtn = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                listenerForSortByComboBox.actionPerformed(new ActionEvent(sortByComboBox, ActionEvent.ACTION_PERFORMED, null));

            }
            
        };

        ascending.addActionListener(listenerForRadioBtn);
        descending.addActionListener(listenerForRadioBtn);



        sortByComboBox.addActionListener(listenerForSortByComboBox);


        sortByComboBox.setSelectedIndex(0); //  rebundant in this case 

        listenerForSortByComboBox.actionPerformed(new ActionEvent(sortByComboBox, ActionEvent.ACTION_PERFORMED, null));


        // Set preferred column widths for each column
        table.getColumnModel().getColumn(0).setPreferredWidth(50); // ID
        table.getColumnModel().getColumn(1).setPreferredWidth(125); // Tutor Name
        table.getColumnModel().getColumn(2).setPreferredWidth(160); // Address
        table.getColumnModel().getColumn(3).setPreferredWidth(110); // Working Type
        table.getColumnModel().getColumn(4).setPreferredWidth(130); // Employment Status
        table.getColumnModel().getColumn(5).setPreferredWidth(100); // Working Hour
        table.getColumnModel().getColumn(6).setPreferredWidth(140); // Department
        table.getColumnModel().getColumn(7).setPreferredWidth(115); // Year Of Experience





       

        // setting the visible property to true if display Lecturer button is pressed
        displayLecturerFrame.setVisible(true);
    }
}


